pipeline {
    agent any

    environment {
        ARTIFACTS_PATH = "/var/lib/jenkins/artifacts/nextjs"
        DEPLOY_PATH = "/var/lib/jenkins/deployed/nextjs"
        APP_NAME = "nextjs-app"
        SLACK_WEBHOOK_URL = credentials('slack-webhook')
    }

    stages {
        stage('Select Build Version') {
            steps {
                script {
                    def versions = sh(script: "ls -t ${ARTIFACTS_PATH}", returnStdout: true).trim().split('\n')
                    env.BUILD_VERSION = versions[0]
                    env.BUILD_DIR = "${ARTIFACTS_PATH}/${env.BUILD_VERSION}"
                    echo "üì¶ Î∞∞Ìè¨Ìï† ÎπåÎìú Î≤ÑÏ†Ñ: ${env.BUILD_VERSION}"

                    if (versions.size() > 1) {
                        env.PREVIOUS_VERSION = versions[1]
                        env.PREVIOUS_DIR = "${ARTIFACTS_PATH}/${env.PREVIOUS_VERSION}"
                    } else {
                        env.PREVIOUS_VERSION = ""
                        env.PREVIOUS_DIR = ""
                    }
                }
            }
        }

        stage('Kill Existing Process') {
            steps {
                script {
                    sh """
                    if pm2 list | grep -q '${APP_NAME}'; then
                      echo "üõë Í∏∞Ï°¥ pm2 ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å";
                      pm2 delete ${APP_NAME};
                    else
                      echo "‚úÖ Ïã§Ìñâ Ï§ëÏù∏ pm2 ÌîÑÎ°úÏÑ∏Ïä§ ÏóÜÏùå";
                    fi
                    """
                }
            }
        }

        stage('Deploy New Version') {
            steps {
                script {
                    def deployTarget = "${DEPLOY_PATH}/${env.BUILD_VERSION}"

                    sh """
                    mkdir -p ${deployTarget}
                    cp -r ${env.BUILD_DIR}/.next ${deployTarget}/
                    cp -r ${env.BUILD_DIR}/package.json ${deployTarget}/
                    cp -r ${env.BUILD_DIR}/public ${deployTarget}/ || true
                    cp -r ${env.BUILD_DIR}/.env.production ${deployTarget}/ || true

                    cd ${deployTarget}
                    npm install --omit=dev

                    echo "üöÄ ÏÉà Î≤ÑÏ†Ñ Ï§ÄÎπÑ ÏôÑÎ£å (${deployTarget})"
                    """
                }
            }
        }

        stage('Run New Version') {
            steps {
                script {
                    def deployTarget = "${DEPLOY_PATH}/${env.BUILD_VERSION}"

                    sh """
                    cd ${deployTarget}
                    pm2 start npm --name "${APP_NAME}" -- run start -- -p 3000 -H 0.0.0.0
                    pm2 save
                    echo "üéâ ÏÉà Î≤ÑÏ†Ñ Ïã§Ìñâ ÏãúÏûë (pm2 Í¥ÄÎ¶¨)"
                    """
                }
            }
        }
    }

    post {
        success {
            script {
                echo "üéâ CD Î∞∞Ìè¨ Î∞è Ïã§Ìñâ ÏÑ±Í≥µ (Î≤ÑÏ†Ñ: ${env.BUILD_VERSION})"
                sh """
                curl -X POST -H 'Content-type: application/json' --data '{"text":"üéâ *Î∞∞Ìè¨ ÏÑ±Í≥µ* (Î≤ÑÏ†Ñ: ${env.BUILD_VERSION})"}' ${SLACK_WEBHOOK_URL}
                """
            }
        }

        failure {
            script {
                echo "‚ùå Î∞∞Ìè¨ Ïã§Ìå®"
                sh """
                curl -X POST -H 'Content-type: application/json' --data '{"text":"‚ùå *Î∞∞Ìè¨ Ïã§Ìå®* (Î≤ÑÏ†Ñ: ${env.BUILD_VERSION}) - Î°§Î∞± ÏãúÎèÑ"}' ${SLACK_WEBHOOK_URL}
                """

                if (env.PREVIOUS_VERSION) {
                    echo "‚ö†Ô∏è Ïù¥Ï†Ñ Î≤ÑÏ†Ñ Î°§Î∞± ÏãúÎèÑ (${env.PREVIOUS_VERSION})"
                    def rollbackTarget = "${DEPLOY_PATH}/${env.PREVIOUS_VERSION}"

                    sh """
                    mkdir -p ${rollbackTarget}
                    cp -r ${env.PREVIOUS_DIR}/.next ${rollbackTarget}/
                    cp -r ${env.PREVIOUS_DIR}/package.json ${rollbackTarget}/
                    cp -r ${env.PREVIOUS_DIR}/public ${rollbackTarget}/ || true
                    cp -r ${env.PREVIOUS_DIR}/.env.production ${rollbackTarget}/ || true

                    cd ${rollbackTarget}
                    npm install --omit=dev

                    if pm2 list | grep -q '${APP_NAME}'; then
                      pm2 delete ${APP_NAME};
                    fi
                    pm2 start npm --name "${APP_NAME}" -- run start -- -p 3000 -H 0.0.0.0
                    pm2 save
                    """

                    sh """
                    curl -X POST -H 'Content-type: application/json' --data '{"text":"üîÑ *Î°§Î∞± ÏôÑÎ£å* (Î≤ÑÏ†Ñ: ${env.PREVIOUS_VERSION})"}' ${SLACK_WEBHOOK_URL}
                    """
                } else {
                    echo "‚ùå Î°§Î∞±Ìï† Ïù¥Ï†Ñ Î≤ÑÏ†ÑÏù¥ ÏóÜÏäµÎãàÎã§."
                    sh """
                    curl -X POST -H 'Content-type: application/json' --data '{"text":"‚ùå *Î°§Î∞± Ïã§Ìå®* - Ïù¥Ï†Ñ Î≤ÑÏ†Ñ ÏóÜÏùå"}' ${SLACK_WEBHOOK_URL}
                    """
                }
            }
        }
    }
}
